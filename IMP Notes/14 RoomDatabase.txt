
@Entity(tableName = "word_table") Each @Entity class represents a SQLite table. Annotate your class declaration to indicate that it's an entity. 
You can specify the name of the table if you want it to be different from the name of the class. This names the table "word_table".

@PrimaryKey Every entity needs a primary key. To keep things simple, each word acts as its own primary key.

@ColumnInfo(name = "word") Specifies the name of the column in the table if you want it to be different from the name of the member variable.
This names the column "word".

Every property that's stored in the database needs to have public visibility, which is the Kotlin default.



#1) Create a entity data class which basically acts as a table schema(table blueprint).

#2) Then create a DAO interface OR abstract class, which basically contains the query for the app.

#3) Now create a class for database.
	-> The database class for Room must be abstract and extend RoomDatabase.

#4) We create a Repository class with passing DAO as a paramter.
	-> A Repository manages queries and allows you to use multiple backends. In the most common example, 
	   the Repository implements the logic for deciding whether to fetch data from a network or use results cached in a local database.

#5) Now we create a ViewModel for our app.
	-> The ViewModel's role is to provide data to the UI and survive configuration changes. 
	   A ViewModel acts as a communication center between the Repository and the UI. 
	   You can also use a ViewModel to share data between fragments.


#####################################################################################################################################################

About project made on Room liberary and SQLite database:
	Created 2 entity (means 2 tables in database).
	Then common DAO (dao is same interface file for both tables).
	Then updated getDatabase file (i.e letting database know about other new table).
	Then updated Repository file for both Tables.
	Then creating a ViewModel class for Database which has all functions for Both tables to be manipulated.
	Then called ViewModel instance wherever needed in any activity or fragment.

* TIP * -> If we add a new table to database then it is necessary to update version number and migration path, hence to avoid this uninstall the app from 
	   mobile and reinstall it.